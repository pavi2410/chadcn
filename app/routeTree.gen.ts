/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegistryImport } from './routes/registry'
import { Route as AuthImport } from './routes/auth'
import { Route as IndexImport } from './routes/index'
import { Route as RegistryIdImport } from './routes/registry.$id'

// Create/Update Routes

const RegistryRoute = RegistryImport.update({
  id: '/registry',
  path: '/registry',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RegistryIdRoute = RegistryIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => RegistryRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/registry': {
      id: '/registry'
      path: '/registry'
      fullPath: '/registry'
      preLoaderRoute: typeof RegistryImport
      parentRoute: typeof rootRoute
    }
    '/registry/$id': {
      id: '/registry/$id'
      path: '/$id'
      fullPath: '/registry/$id'
      preLoaderRoute: typeof RegistryIdImport
      parentRoute: typeof RegistryImport
    }
  }
}

// Create and export the route tree

interface RegistryRouteChildren {
  RegistryIdRoute: typeof RegistryIdRoute
}

const RegistryRouteChildren: RegistryRouteChildren = {
  RegistryIdRoute: RegistryIdRoute,
}

const RegistryRouteWithChildren = RegistryRoute._addFileChildren(
  RegistryRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/registry': typeof RegistryRouteWithChildren
  '/registry/$id': typeof RegistryIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/registry': typeof RegistryRouteWithChildren
  '/registry/$id': typeof RegistryIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/registry': typeof RegistryRouteWithChildren
  '/registry/$id': typeof RegistryIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/registry' | '/registry/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/registry' | '/registry/$id'
  id: '__root__' | '/' | '/auth' | '/registry' | '/registry/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  RegistryRoute: typeof RegistryRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  RegistryRoute: RegistryRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/registry"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/registry": {
      "filePath": "registry.tsx",
      "children": [
        "/registry/$id"
      ]
    },
    "/registry/$id": {
      "filePath": "registry.$id.tsx",
      "parent": "/registry"
    }
  }
}
ROUTE_MANIFEST_END */
